{"ast":null,"code":"export const calculateTotalVolume = (sets, reps, weight) => {\n  return parseInt(sets) * parseInt(reps) * parseFloat(weight);\n};\nexport const getProgressData = (workoutHistory, exercise) => {\n  const exerciseHistory = workoutHistory.filter(entry => entry.exercise === exercise).sort((a, b) => new Date(a.date) - new Date(b.date)).slice(-10); // Last 10 workouts\n\n  return exerciseHistory.map(entry => ({\n    date: entry.date,\n    weight: entry.weight,\n    volume: entry.totalVolume,\n    reps: entry.reps,\n    sets: entry.sets\n  }));\n};\nexport const getTotalVolumeByDay = workoutHistory => {\n  const volumeByDay = {};\n  workoutHistory.forEach(entry => {\n    if (!volumeByDay[entry.day]) {\n      volumeByDay[entry.day] = 0;\n    }\n    volumeByDay[entry.day] += entry.totalVolume;\n  });\n  return Object.entries(volumeByDay).map(([day, volume]) => ({\n    day: day.replace(' Day', ''),\n    volume\n  }));\n};\nexport const getPersonalRecord = (workoutHistory, exercise) => {\n  const exerciseWorkouts = workoutHistory.filter(entry => entry.exercise === exercise);\n  if (exerciseWorkouts.length === 0) return null;\n  return Math.max(...exerciseWorkouts.map(workout => workout.weight));\n};","map":{"version":3,"names":["calculateTotalVolume","sets","reps","weight","parseInt","parseFloat","getProgressData","workoutHistory","exercise","exerciseHistory","filter","entry","sort","a","b","Date","date","slice","map","volume","totalVolume","getTotalVolumeByDay","volumeByDay","forEach","day","Object","entries","replace","getPersonalRecord","exerciseWorkouts","length","Math","max","workout"],"sources":["C:/Users/MRUNMAYI/OneDrive/Desktop/BTP_GymTracker/src/utils/calculations.js"],"sourcesContent":["export const calculateTotalVolume = (sets, reps, weight) => {\r\n  return parseInt(sets) * parseInt(reps) * parseFloat(weight);\r\n};\r\n\r\nexport const getProgressData = (workoutHistory, exercise) => {\r\n  const exerciseHistory = workoutHistory\r\n    .filter(entry => entry.exercise === exercise)\r\n    .sort((a, b) => new Date(a.date) - new Date(b.date))\r\n    .slice(-10); // Last 10 workouts\r\n\r\n  return exerciseHistory.map(entry => ({\r\n    date: entry.date,\r\n    weight: entry.weight,\r\n    volume: entry.totalVolume,\r\n    reps: entry.reps,\r\n    sets: entry.sets\r\n  }));\r\n};\r\n\r\nexport const getTotalVolumeByDay = (workoutHistory) => {\r\n  const volumeByDay = {};\r\n  \r\n  workoutHistory.forEach(entry => {\r\n    if (!volumeByDay[entry.day]) {\r\n      volumeByDay[entry.day] = 0;\r\n    }\r\n    volumeByDay[entry.day] += entry.totalVolume;\r\n  });\r\n\r\n  return Object.entries(volumeByDay).map(([day, volume]) => ({\r\n    day: day.replace(' Day', ''),\r\n    volume\r\n  }));\r\n};\r\n\r\nexport const getPersonalRecord = (workoutHistory, exercise) => {\r\n  const exerciseWorkouts = workoutHistory.filter(entry => entry.exercise === exercise);\r\n  if (exerciseWorkouts.length === 0) return null;\r\n  \r\n  return Math.max(...exerciseWorkouts.map(workout => workout.weight));\r\n};"],"mappings":"AAAA,OAAO,MAAMA,oBAAoB,GAAGA,CAACC,IAAI,EAAEC,IAAI,EAAEC,MAAM,KAAK;EAC1D,OAAOC,QAAQ,CAACH,IAAI,CAAC,GAAGG,QAAQ,CAACF,IAAI,CAAC,GAAGG,UAAU,CAACF,MAAM,CAAC;AAC7D,CAAC;AAED,OAAO,MAAMG,eAAe,GAAGA,CAACC,cAAc,EAAEC,QAAQ,KAAK;EAC3D,MAAMC,eAAe,GAAGF,cAAc,CACnCG,MAAM,CAACC,KAAK,IAAIA,KAAK,CAACH,QAAQ,KAAKA,QAAQ,CAAC,CAC5CI,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAK,IAAIC,IAAI,CAACF,CAAC,CAACG,IAAI,CAAC,GAAG,IAAID,IAAI,CAACD,CAAC,CAACE,IAAI,CAAC,CAAC,CACnDC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;;EAEf,OAAOR,eAAe,CAACS,GAAG,CAACP,KAAK,KAAK;IACnCK,IAAI,EAAEL,KAAK,CAACK,IAAI;IAChBb,MAAM,EAAEQ,KAAK,CAACR,MAAM;IACpBgB,MAAM,EAAER,KAAK,CAACS,WAAW;IACzBlB,IAAI,EAAES,KAAK,CAACT,IAAI;IAChBD,IAAI,EAAEU,KAAK,CAACV;EACd,CAAC,CAAC,CAAC;AACL,CAAC;AAED,OAAO,MAAMoB,mBAAmB,GAAId,cAAc,IAAK;EACrD,MAAMe,WAAW,GAAG,CAAC,CAAC;EAEtBf,cAAc,CAACgB,OAAO,CAACZ,KAAK,IAAI;IAC9B,IAAI,CAACW,WAAW,CAACX,KAAK,CAACa,GAAG,CAAC,EAAE;MAC3BF,WAAW,CAACX,KAAK,CAACa,GAAG,CAAC,GAAG,CAAC;IAC5B;IACAF,WAAW,CAACX,KAAK,CAACa,GAAG,CAAC,IAAIb,KAAK,CAACS,WAAW;EAC7C,CAAC,CAAC;EAEF,OAAOK,MAAM,CAACC,OAAO,CAACJ,WAAW,CAAC,CAACJ,GAAG,CAAC,CAAC,CAACM,GAAG,EAAEL,MAAM,CAAC,MAAM;IACzDK,GAAG,EAAEA,GAAG,CAACG,OAAO,CAAC,MAAM,EAAE,EAAE,CAAC;IAC5BR;EACF,CAAC,CAAC,CAAC;AACL,CAAC;AAED,OAAO,MAAMS,iBAAiB,GAAGA,CAACrB,cAAc,EAAEC,QAAQ,KAAK;EAC7D,MAAMqB,gBAAgB,GAAGtB,cAAc,CAACG,MAAM,CAACC,KAAK,IAAIA,KAAK,CAACH,QAAQ,KAAKA,QAAQ,CAAC;EACpF,IAAIqB,gBAAgB,CAACC,MAAM,KAAK,CAAC,EAAE,OAAO,IAAI;EAE9C,OAAOC,IAAI,CAACC,GAAG,CAAC,GAAGH,gBAAgB,CAACX,GAAG,CAACe,OAAO,IAAIA,OAAO,CAAC9B,MAAM,CAAC,CAAC;AACrE,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}